pragma solidity >= 0.7.0;

library BitUtils {


    function getBitRange(bytes32 slotValue, uint8 start, uint16 len) internal pure returns (uint256) {
        uint256 mask = (((uint256(1) << len) - 1) << start);
        uint256 bits = uint256(slotValue);
        return (bits & mask) >> start;
    }

    /*
     *  Sets a bit range from 'start' to 'finish' (inclusive) 'addr's storage in slot 'slot'.
     *
     */
    function setBitRange(bytes32 slotValue, uint8 start, uint16 len, uint256 value) internal pure returns (bytes32) {
        uint256 mask = ~(((uint256(1) << len) - 1) << start);
        uint256 bits = uint256(slotValue);
        uint256 valueBitsMask = ((uint256(1) << len) - 1);
        uint256 valueBits = (value & valueBitsMask) << start;
        return bytes32((bits & mask) | valueBits);
    }

}